{"version":3,"sources":["Checkout/Checkout.js","Login/Registration.js","Login/Login.js","OrderList/OrderList.js","PaymentForm/PaymentForm.js","PizzaEditor/store/PizzaStoreRedux.js","PizzaEditor/PizzaEditorStyle.js","PizzaEditor/PizzaEditorForm.js","PizzaEditor/store/ToppingsName.js","App.js","reportWebVitals.js","index.js"],"names":["Checkout","PizzaName","useSelector","state","toppings","FinalTotal","total","pizzaItem","map","item","i","key","className","schema","yup","shape","password","required","email","Registration","useForm","resolver","yupResolver","mode","register","handleSubmit","dispatch","errors","watch","registered","useDispatch","to","onSubmit","data","type","payload","ref","name","min","Login","Registered","message","onClick","OrderList","PizzaOrderList","orderList","ServAnswer","servAnswer","pizzaName","isError","JSON","stringify","error","isLoading","address","entrance","transform","cv","ov","undefined","typeError","floor","apartment","cardNumber","month","CVV","PaymentForm","values","fullAddress","cardnum","serwaddress","fetch","method","body","headers","then","res","json","sendOrder","placeholder","inputMode","autoComplete","id","onChange","e","value","target","replace","match","join","substr","normalizeCardNum","normalizeCVV","setQuote","data2","data1","newNewData","dough","size","sauce","cheese","vegetables","meat","itemNew","category","slug","price","image","thumbnail","push","fetchdata","createAsyncThunk","a","result","pizzaLogic","createSlice","initialState","pizzaServData","reducers","action","finalTotal","cardNum","extraReducers","fulfilled","PizzaServData","pizzaData","Number","reduce","store","configureStore","reducer","MainApp","styled","form","SizeDoughInner","div","SizeDough","fieldset","ToppingTitle","legend","SizeDoughWrapper","RadioBox","input","RadioLabel","label","RadioText","span","SizeDoughText","SauceInner","CheckboxGroup","CheckboxInner","CheckboxTitle","CheckboxWrapper","CheckboxText","p","PizzaEditorForm","defaultValues","settings","dots","infinite","slidesToShow","slidesToScroll","newTopping","doughName","sizeName","sauceName","cheeseName","vegetablesName","meatName","toppingsName","imgsrc","imgName","width","src","alt","height","names","img","valueName","styles","position","zIndex","left","top","backgroundRepeat","backgroundSize","style","display","margin","flexDirection","justifyContent","flexWrap","marginBottom","marginLeft","thin","fluffy","small","big","tomatoSauce","whiteSauce","spicySauce","mozarella","cheddar","dorBlue","maxWidth","tomato","mushrooms","olives","pineapple","pepper","broccoli","onion","bacon","pepperoni","ham","chicken","salami","App","useQuery","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89780fb5.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nexport default function Checkout() {\r\n\r\n    const PizzaName = useSelector(state => state.toppings)\r\n    const FinalTotal = useSelector(state => state.total)\r\n    const name = PizzaName\r\n    let pizzaItem = name.map((item, i) => {\r\n        return (\r\n            <li key={i} className=\"order-list__ing\">\r\n                {item}\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"order\">\r\n                <div className=\"container\">\r\n                    <header className=\"order__header\">\r\n                        <div className=\"order__close-btn\"></div>\r\n                    </header>\r\n                    <div className=\"order__ico \"></div>\r\n                    {/* <div className=\"order__ico  wrong\"></div> */}\r\n                    <div className=\"order__title\">Спасибо за заказ!</div>\r\n                    <div className=\"order__text\">Заказ успешно оплачен, ждите вашу пиццу уже через час</div>\r\n                    <div className=\"order__btn \">\r\n                        {/* <div className=\"order__btn wrong\"> */}\r\n                        {/* <Link className=\"order__btn-text \" to=\"/pizza-editor-registration\">Попробовать еще раз</Link> */}\r\n                    </div>\r\n                    <div className=\"order-list__item\">\r\n                        <div className=\"order-list__item-top \">\r\n                            <p className=\"order-list__item-num\">Заказ 2390</p>\r\n                            <p className=\"order-list__item-state\">21 октября 2020, 13:40</p>\r\n                        </div>\r\n                        <div className=\"order-list__item-mid\">\r\n                            <p className=\"order-list__item-title\">\r\n                                Ленивая Маргарита\r\n                            </p>\r\n                            <div className=\"order-list__item-text\">\r\n                                {pizzaItem}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"order-list__item-bot\">\r\n                            <p className=\"order-list__item-paid\">\r\n                                {FinalTotal + 180} руб • оплата MC\r\n                            </p>\r\n                            <p className=\"order-list__item-bot-state delivered\">\r\n                                Доставляется\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom' \r\nimport { useForm } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst schema = yup.object().shape({\r\n    password: yup.string().required(\"Введите Пароль\"),\r\n    email: yup.string().email(\"собака\").required(\"Введите E-mail\"),\r\n\r\n})\r\n\r\n\r\n\r\nfunction Registration() {\r\n    const { register, handleSubmit, errors, watch } = useForm({\r\n        resolver: yupResolver(schema),\r\n        mode: \"onBlur\"\r\n    })\r\n    const Registered = useSelector(state => state.registered)\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (data) => { \r\n        dispatch({ type: \"pizza/registered\", payload: true })\r\n    }; \r\n \r\n    return (\r\n        <div className=\"auth-form\">\r\n            <header className=\"payment-form__header\">\r\n                <Link to=\"/pizza-editor-login\" className=\"payment-form__header-link\"></Link>\r\n                <p className=\"payment-form__title\">Регистрация</p>\r\n            </header>\r\n            <section className=\"auth-form\">\r\n                <div className=\"container\">\r\n                    <form className=\"auth-form__form\" onSubmit={handleSubmit(onSubmit)}>\r\n                        <label className=\"auth-form__label\">E-mail\r\n                            <input\r\n                                type=\"email\"\r\n                                className=\"auth-form__input\"\r\n                                ref={register}\r\n                                name=\"email\"\r\n                            />\r\n                        </label>\r\n                        <label className=\"auth-form__label\">Пароль\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"auth-form__input\"\r\n                                ref={register}\r\n                                name=\"password\"\r\n                            />\r\n                            {/* <input type=\"password\" className=\"auth-form__input wrong\" /> */}\r\n                            <span className=\"auth-form__wrong wrong\">Неправильный пароль</span>\r\n                        </label>\r\n                        <div className=\"auth-form__btn-inner active\">\r\n                            <Link to=\"/checkout\" className=\"auth-form__btn  active\">Зарегестрироваться</Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\nexport default  Registration ","import React from 'react'\r\nimport { Link } from 'react-router-dom' \r\nimport { useForm } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useSelector, useDispatch } from 'react-redux'; \r\n\r\n\r\nconst schema = yup.object().shape({\r\n    password: yup.string().min(7, \"Введите минимум 7 знаков\").required(\"Введите Пароль\"),\r\n    email: yup.string().email(\"собака\").required(\"Введите E-mail\"),\r\n\r\n})\r\n\r\n\r\nfunction Login() {\r\n    const { register, handleSubmit, errors, watch } = useForm({\r\n        resolver: yupResolver(schema),\r\n        mode: \"onBlur\"\r\n    })\r\n    \r\n    const Registered = useSelector(state => state.registered )\r\n    const dispatch = useDispatch();\r\n    const auth = () => {\r\n        if(Registered ){\r\n            return \"/login\"\r\n        }else {\r\n            return \"/order-list\"\r\n        }\r\n    }\r\n\r\n    const onSubmit = (data) => {  \r\n        dispatch({ type: \"pizza/registered\", payload: true })\r\n    };\r\n \r\n    return (\r\n        <div className=\"auth-form\">\r\n            <header className=\"payment-form__header\">\r\n                <Link to=\"/pizza-editor-login\" className=\"payment-form__header-link\"> </Link>\r\n                <p className=\"payment-form__title\">Авторизация</p>\r\n            </header>\r\n            <section className=\"auth-form\">\r\n                <div className=\"container\">\r\n                    <form className=\"auth-form__form\" onSubmit={handleSubmit(onSubmit)}>\r\n                        <label className=\"auth-form__label\">E-mail\r\n                            <input\r\n                                type=\"email\"\r\n                                className=\"auth-form__input\"\r\n                                ref={register}\r\n                                name=\"email\"\r\n                            />\r\n                            {errors.email && <p>{errors.email.message}</p>}\r\n                        </label>\r\n                        <label className=\"auth-form__label\">Пароль\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"auth-form__input\"\r\n                                ref={register}\r\n                                name=\"password\"\r\n                            />\r\n                            {errors.password && <p>{errors.password.message}</p>}\r\n                            {/* <input type=\"password\" className=\"auth-form__input wrong\" /> */}\r\n                            <span className=\"auth-form__wrong wrong\">Неправильный пароль</span>\r\n                        </label>\r\n                        <div className=\"auth-form__btn-inner active\">\r\n                            <Link  to={auth} className=\"auth-form__btn  active\" onClick={onSubmit}>Войти</Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\nexport default  Login \r\n\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom' \r\nimport { useQuery } from \"react-query\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nexport default function OrderList() {\r\n    \r\n   \r\n    const PizzaOrderList = useSelector(state => state.orderList)\r\n    const FinalTotal =  useSelector(state => state.total)\r\n    const ServAnswer = useSelector(state => state.servAnswer) \r\n\r\n    const pizzaName = () => {\r\n        const name = [...PizzaOrderList[2]]\r\n        const newName = name.map((item, i) => {\r\n            return (\r\n                <li key={i} className=\"order-list__ing\" >\r\n                    {item}\r\n                </li>\r\n            )\r\n        })\r\n        return newName\r\n    }\r\n\r\n    if (ServAnswer.isError) {\r\n        return <>Error: {JSON.stringify(ServAnswer.error)}</>;\r\n    }\r\n\r\n    if (ServAnswer.isLoading) {\r\n        return <>Loading...</>;\r\n    } else {\r\n        pizzaName()\r\n    }\r\n    let pizzaItem = pizzaName() || \"name\"\r\n    return (\r\n        <div className=\"order-list\">\r\n            <header className=\"payment-form__header\">\r\n                <Link to=\"/\" className=\"payment-form__header-link\"></Link>\r\n                <p className=\"payment-form__title\">Заказы</p>\r\n            </header>\r\n            <div className=\"order-list__wrapper\">\r\n                <div className=\"container\">\r\n                    <div className=\"order-list__item\">\r\n                        <div className=\"order-list__item-top delivered\">\r\n                            <p className=\"order-list__item-num\">Заказ 2390</p>\r\n                            <p className=\"order-list__item-state\">21 октября 2020, 13:40 • Доставлен</p>\r\n                        </div>\r\n                        <div className=\"order-list__item-mid\">\r\n                            <p className=\"order-list__item-title\">\r\n                                Ленивая Маргарита\r\n                        </p>\r\n                            <div className=\"order-list__item-text\">\r\n                                {pizzaItem}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"order-list__item-bot\">\r\n                            <p className=\"order-list__item-paid\">\r\n                                {FinalTotal} руб • оплата MC *2345\r\n                        </p>\r\n                            <p className=\"order-list__item-bot-state delivered\">\r\n                                Доставляется\r\n                        </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"order-list__item\">\r\n                        <div className=\"order-list__item-top \">\r\n                            <p className=\"order-list__item-num\">Заказ 2390</p>\r\n                            <p className=\"order-list__item-state\">21 октября 2020, 13:40</p>\r\n                        </div>\r\n                        <div className=\"order-list__item-mid\">\r\n                            <p className=\"order-list__item-title\">\r\n                                Ленивая Маргарита\r\n                        </p>\r\n                            <div className=\"order-list__item-text\">\r\n                                {pizzaItem}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"order-list__item-bot\">\r\n                            <p className=\"order-list__item-paid\">\r\n                                {FinalTotal} руб • оплата MC\r\n                        </p>\r\n                            <p className=\"order-list__item-bot-state \">\r\n                                Повторить заказ\r\n                        </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"order-list__item\">\r\n                        <div className=\"order-list__item-top \">\r\n                            <p className=\"order-list__item-num\">Заказ 2390</p>\r\n                            <p className=\"order-list__item-state\">21 октября 2020, 13:40</p>\r\n                        </div>\r\n                        <div className=\"order-list__item-mid\">\r\n                            <p className=\"order-list__item-title\">\r\n                                Ленивая Маргарита\r\n                        </p>\r\n                            <div className=\"order-list__item-text\">\r\n                                {pizzaItem}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"order-list__item-bot\">\r\n                            <p className=\"order-list__item-paid\">\r\n                                {FinalTotal} руб • оплата MC\r\n                        </p>\r\n                            <p className=\"order-list__item-bot-state \">\r\n                                Повторить заказ\r\n                        </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useDispatch, useSelector } from \"react-redux\"; \r\n\r\n\r\n\r\nconst normalizeCardNum = (value) => {\r\n    return value.replace(/\\s/g, '').match(/.{1,4}/g)?.join(\" \").substr(0, 19) || \"\"\r\n}\r\n\r\nconst normalizeCVV = (value) => {\r\n    return value.replace(/\\s/g, '').match(/.{1,4}/g)?.join(\" \").substr(0, 3) || \"\"\r\n}\r\n\r\nconst schema = yup.object().shape({\r\n    address: yup.string().required(\"Введите адрес\"),\r\n    entrance: yup.number()\r\n        .transform((cv, ov) => (ov === \"\" ? undefined : cv))\r\n        .typeError(\"номер подъезда должен быть числом\")\r\n        .required(\"Введите номер подъезда\"),\r\n    floor: yup.number()\r\n        .transform((cv, ov) => (ov === \"\" ? undefined : cv))\r\n        .typeError(\"этаж должен быть числом\")\r\n        .required(\"Введите этаж\"),\r\n    apartment: yup.number()\r\n        .transform((cv, ov) => (ov === \"\" ? undefined : cv))\r\n        .typeError(\"квартира должна быть числом\")\r\n        .required(\"Введите номер квартиры\"),\r\n    cardNumber: yup.number()\r\n        .transform((cv, ov) => (ov === \"\" ? undefined : cv))\r\n        .typeError(\"номер карты должен быть числом\")\r\n        .required(\"Введите номер карты\"),\r\n    month: yup.number()\r\n        .transform((cv, ov) => (ov === \"\" ? undefined : cv))\r\n        .typeError(\"дата должна быть числом\")\r\n        .required(\"Введите дату\"),\r\n    CVV: yup.number()\r\n        .transform((cv, ov) => (ov === \"\" ? undefined : cv))\r\n        .typeError(\"CVV должен быть числом\")\r\n        .required(\"Введите CVV\"),\r\n    name: yup.string().required(\"Введите имя как на карте\"),\r\n});\r\n\r\nconst sendOrder = (data) => {\r\n    return fetch(`http://localhost:4000/orders`,\r\n        {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ \"name\": data[3], \"ingredients\": data[2], \"address\": data[1], \"card_number\": data[0] }),\r\n            headers: {\r\n                \"Content-type\": \"application/json; charset=UTF-8\",\r\n\r\n            },\r\n        })\r\n        .then((res) => res.json())\r\n}\r\n\r\n\r\nfunction PaymentForm() {\r\n    const { register, handleSubmit, errors, watch } = useForm({\r\n        resolver: yupResolver(schema),\r\n        mode: \"onBlur\"\r\n    })\r\n\r\n    const values = watch()\r\n    const dispatch = useDispatch();\r\n    const PizzaName = useSelector(state => state.toppings)\r\n    const OrderList = useSelector(state => state.orderList)\r\n    let fullAddress = { address: values.address, entrance: values.entrance, floor: values.floor, apartment: values.apartment }\r\n    let cardnum = values.cardNumber\r\n    let serwaddress = values.address\r\n    const FinalTotal = useSelector(state => state.total)\r\n    const onSubmit = (data) => {\r\n        dispatch({ type: \"pizza/cardNum\", payload: values.cardNumber })\r\n        dispatch({ type: \"pizza/address\", payload: fullAddress })\r\n        dispatch({ type: \"pizza/orderList\", payload: [cardnum, serwaddress, PizzaName, \"PizzaName\"] })\r\n        sendOrder(OrderList)\r\n    }\r\n\r\n\r\n    const name = PizzaName\r\n    let pizzaItem = name.map((item, i) => {\r\n        return (\r\n            <li key={i} className=\"order-list__ing\">\r\n                {item}\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"payment-form\">\r\n            <header className=\"payment-form__header\">\r\n                <Link to=\"/registration\" className=\"payment-form__header-link\"> </Link>\r\n                <p className=\"payment-form__title\">Оформление заказа</p>\r\n            </header>\r\n            <section className=\"payment-form__pizza\">\r\n                <div className=\"container\">\r\n                    <div className=\"payment-form__pizza-inner\">\r\n                        <p className=\"payment-form__pizza-title\">Ленивая Маргарита</p>\r\n                        <div className=\"payment-form__pizza-text\">{pizzaItem}</div>\r\n                        <p className=\"payment-form__pizza-price\">{FinalTotal} руб</p>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"payment-form__address\">\r\n                <div className=\"container\">\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <div className=\"payment-form__address-top\">\r\n                            <p className=\"payment-form__address-text\">Адрес доставки</p>\r\n                            <input\r\n                                className=\"payment-form__address-input-big\"\r\n                                type=\"text\"\r\n                                placeholder=\"Введите адрес\"\r\n                                ref={register}\r\n                                name=\"address\"\r\n                            />\r\n                            {errors.address && <p>{errors.address.message}</p>}\r\n                            <div className=\"payment-form__address-inner\">\r\n                                <label className=\"payment-form__address-input-label\">подъезд\r\n                                    <input\r\n                                        className=\"payment-form__address-input\"\r\n                                        type=\"text\"\r\n                                        ref={register}\r\n                                        name=\"entrance\"\r\n                                    />\r\n                                    {errors.entrance && <p>{errors.entrance.message}</p>}\r\n                                </label>\r\n                                <label className=\"payment-form__address-input-label\">этаж\r\n                                    <input\r\n                                        className=\"payment-form__address-input\"\r\n                                        type=\"text\"\r\n                                        ref={register}\r\n                                        name=\"floor\"\r\n                                    />\r\n                                    {errors.floor && <p>{errors.floor.message}</p>}\r\n                                </label>\r\n                                <label className=\"payment-form__address-input-label\">квартира\r\n                                    <input\r\n                                        className=\"payment-form__address-input\"\r\n                                        type=\"text\"\r\n                                        ref={register}\r\n                                        name=\"apartment\" />\r\n                                    {errors.apartment && <p>{errors.apartment.message}</p>}\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"payment-form__address-bot\">\r\n                            <p className=\"payment-form__address-text\">Данные для оплаты</p>\r\n                            <input\r\n                                placeholder=\"Номер карты\"\r\n                                className=\"payment-form__address-input-big\"\r\n                                type=\"tel\"\r\n                                inputMode=\"numeric\"\r\n                                autoComplete=\"cc-number\"\r\n                                name=\"cardNumber\"\r\n                                id=\"cardNumber\"\r\n                                ref={register}\r\n                                onChange={(e) => {\r\n                                    const { value } = e.target\r\n                                    e.target.value = normalizeCardNum(value)\r\n                                }}\r\n                            />\r\n                            {errors.cardNumber && <p>{errors.cardNumber.message}</p>}\r\n                            <div className=\"payment-form__address-small-inner\">\r\n                                <input\r\n                                    type=\"number\"\r\n                                    placeholder=\"MM/YYYY\"\r\n                                    className=\"payment-form__address-input-small payment-form__address-input-date\"\r\n                                    ref={register}\r\n                                    name=\"month\"\r\n                                />\r\n                                {errors.month && <p>{errors.month.message}</p>}\r\n                                <input\r\n                                    placeholder=\"CVV\"\r\n                                    className=\"payment-form__address-input-small\"\r\n                                    ref={register}\r\n                                    name=\"CVV\"\r\n                                    onChange={(e) => {\r\n                                        const { value } = e.target\r\n                                        e.target.value = normalizeCVV(value)\r\n                                    }}\r\n                                />\r\n                                {errors.CVV && <p>{errors.CVV.message}</p>}\r\n                            </div>\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Имя как на карте\"\r\n                                className=\"payment-form__address-input-big payment-form__address-input-name\"\r\n                                ref={register}\r\n                                name=\"name\"\r\n                            />\r\n                            {errors.name && <p>{errors.name.message}</p>}\r\n                        </div>\r\n                    </ form>\r\n                    <p className=\"payment-form__address-bot-text\">Доставим пиццу в течение часа или вернем деньги. Артем слов на ветер не бросает.</p>\r\n                </div>\r\n            </section>\r\n            <footer className=\"footer\">\r\n                <div className=\"container\">\r\n                    <div className=\"footer-top\">\r\n                        <div className=\"footer-top__text-inner\">\r\n                            <p className=\"footer-top__text\">Стоимость заказа</p>\r\n                            <p className=\"footer-top__price\">{FinalTotal} руб</p>\r\n                        </div>\r\n                        <div className=\"footer-top__text-inner\">\r\n                            <p className=\"footer-top__text\">Доставка</p>\r\n                            <p className=\"footer-top__price\">180 руб</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"footer-bot\">\r\n                        <div className=\"footer-bot__text-inner\">\r\n                            <p className=\"footer-bot__text\">К оплате</p>\r\n                            <p className=\"footer-bot__price\">{FinalTotal + 180} руб</p>\r\n                        </div>\r\n                        <div className=\"footer-bot__btn-inner active\">\r\n                            <Link to=\"/registration\" className=\"footer-bot__btn active\" onClick={onSubmit}>Оплатить {FinalTotal + 180} руб</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\nexport default PaymentForm ","import { configureStore, createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst setQuote = (data) => {\r\n    const data2 = []\r\n    const data1 = [...data]\r\n    const dataS = [{\r\n        dough: {\r\n            'thin': {},\r\n            'fluffy': {}\r\n        },\r\n        size: {\r\n            'small': {},\r\n            'big': {},\r\n        },\r\n        sauce: {\r\n            'tomatoSauce': {},\r\n            'whiteSauce': {},\r\n            'spicySauce': {},\r\n        },\r\n        cheese: {\r\n            'mozzarella': {},\r\n            'cheddar': {},\r\n            'dorBlue': {}\r\n        },\r\n        vegetables: {\r\n            'tomato': {},\r\n            'mushrooms': {},\r\n            'pepper': {},\r\n        },\r\n        meat: {\r\n            'bacon': {},\r\n            'pepperoni': {},\r\n            'ham': {},\r\n        }\r\n    }]\r\n    const newNewData = dataS;\r\n    function toppings(itemNew) {\r\n\r\n        if (itemNew.category === \"dough\") {\r\n            const name = itemNew.slug \r\n            const slug = itemNew.name \r\n            const price = itemNew.price\r\n            const image = itemNew.image\r\n            const thumbnail = itemNew.thumbnail\r\n            newNewData[0].dough[name] = ({ name, price, image, thumbnail, slug })\r\n        } else if (itemNew.category === \"size\") {\r\n            const name = itemNew.slug \r\n            const slug = itemNew.name \r\n            const price = itemNew.price\r\n            const image = itemNew.image\r\n            const thumbnail = itemNew.thumbnail\r\n            newNewData[0].size[name] = ({ name, price, image, thumbnail, slug })\r\n        }\r\n        else if (itemNew.category === \"sauce\") {\r\n            const name = itemNew.slug \r\n            const slug = itemNew.name \r\n            const price = itemNew.price\r\n            const image = itemNew.image\r\n            const thumbnail = itemNew.thumbnail\r\n            newNewData[0].sauce[name] = ({ name, price, image, thumbnail, slug })\r\n\r\n        } else if (itemNew.category === \"cheese\") {\r\n            const name = itemNew.slug \r\n            const slug = itemNew.name \r\n            const price = itemNew.price\r\n            const image = itemNew.image\r\n            const thumbnail = itemNew.thumbnail\r\n            newNewData[0].cheese[name] = ({ name, price, image, thumbnail, slug })\r\n\r\n        } else if (itemNew.category === \"vegetables\") {\r\n            const name = itemNew.slug \r\n            const slug = itemNew.name \r\n            const price = itemNew.price\r\n            const image = itemNew.image\r\n            const thumbnail = itemNew.thumbnail\r\n            newNewData[0].vegetables[name] = ({ name, price, image, thumbnail, slug })\r\n        } else if (itemNew.category === \"meat\") {\r\n            const name = itemNew.slug \r\n            const slug = itemNew.name \r\n            const price = itemNew.price\r\n            const image = itemNew.image\r\n            const thumbnail = itemNew.thumbnail\r\n            newNewData[0].meat[name] = ({ name, price, image, thumbnail, slug })\r\n\r\n        }\r\n    }\r\n\r\n    let newData = data1.map((item, i) => {\r\n        const itemNew = item\r\n        toppings(itemNew)\r\n    })\r\n    data2.push(...newNewData)\r\n    return data2\r\n}\r\n\r\nexport const fetchdata = createAsyncThunk(\"pizza/fetchdata\", async () => {\r\n    const result = await fetch(`https://dzs9l.sse.codesandbox.io/ingredients`)\r\n        .then((res) => res.json())\r\n        .then((data) => setQuote(data))\r\n    return result\r\n});\r\n\r\nconst initialState = {\r\n    toppings: [],\r\n    address: [],\r\n    cardnum: \"\",\r\n    total: 200,\r\n    registered: false,\r\n    pizzaServData: [],\r\n    orderList: [],\r\n    servAnswer: {\r\n        isLoading: false,\r\n        isError: false,\r\n        error: \"\"\r\n    },\r\n};\r\n\r\nconst pizzaLogic = createSlice({\r\n    name: \"pizza\",\r\n    initialState,\r\n    reducers: {\r\n        pizzaName: (state, action) => {\r\n            state.toppings = action.payload\r\n        },\r\n        finalTotal: (state, action) => {\r\n            state.total = action.payload\r\n        },\r\n        cardNum: (state, action) => {\r\n            state.cardnum = action.payload\r\n        },\r\n        address: (state, action) => {\r\n            state.address = action.payload\r\n        },\r\n        registered: (state, action) => {\r\n            state.registered = action.payload\r\n        },\r\n        orderList: (state, action) => {\r\n            state.orderList = action.payload\r\n        },\r\n        servAnswer: (state, action) => {\r\n            state.servAnswer.isLoading = action.isLoading\r\n            state.servAnswer.isError = action.isError\r\n            state.servAnswer.error = action.error\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [fetchdata.fulfilled]: (state, action) => {\r\n            state.pizzaServData = action.payload;\r\n        },\r\n\r\n    }\r\n})\r\n\r\nexport const finalTotal = (values, PizzaServData) => {\r\n    if (PizzaServData !== undefined) {\r\n        let pizzaData = PizzaServData\r\n        const doughPrice = Number(pizzaData.dough[values.dough].price);\r\n        const sizePrice = Number(pizzaData.size[values.size].price);\r\n        const saucePrice = Number(pizzaData.sauce[values.sauce].price);\r\n        const cheesePrice = values.cheese.reduce(\r\n            (price, cheese) => price + Number(pizzaData.cheese[cheese].price),\r\n            0\r\n        );\r\n        const vegetablesPrice = values.vegetables.reduce(\r\n            (price, vegetables) => price + Number(pizzaData.vegetables[vegetables].price),\r\n            0\r\n        );\r\n        const meatPrice = values.meat.reduce(\r\n            (price, meat) => price + Number(pizzaData.meat[meat].price),\r\n            0\r\n        );\r\n        return doughPrice + sizePrice + saucePrice + cheesePrice + vegetablesPrice + meatPrice + 200;\r\n    }\r\n    else {\r\n        return 200\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const store = configureStore({ reducer: pizzaLogic.reducer });\r\n\r\nstore.dispatch(fetchdata()); \r\n","import styled from 'styled-components';\r\nimport React from 'react'\r\n\r\nexport const MainApp = styled.form`\r\n    display: flex;\r\n    margin: 0 auto;\r\n    // margin-top: 100px;\r\n    align-items: center;\r\n    height: 100%;\r\n    width: 360px;\r\n    flex-direction: column;\r\n`\r\n\r\nexport const SizeDoughInner = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n`\r\nexport const SizeDough = styled.fieldset`\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 47%;\r\n`\r\nexport const ToppingTitle = styled.legend`\r\n    color: #4B4B7C;\r\n    font-family: Rounded Mplus 1c;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    line-height: 20px;\r\n    padding-left: 15px;\r\n`\r\n\r\nexport const SizeDoughWrapper = styled.div`\r\n    width: fit-content;\r\n    background: #F9F9FB;\r\n    padding: 6px 6px 12px;\r\n    border-radius: 12px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: auto;\r\n`\r\n\r\nexport const RadioBox = styled.input`\r\n    display: none;\r\n`\r\n\r\nexport const RadioLabel = styled.label`\r\n    input[type=\"radio\"]:checked  {\r\n    background: #FFFFFF;\r\n    box-shadow: 0px 8px 16px rgba(75, 75, 124, 0.05);\r\n    }\r\n`\r\n\r\nexport const RadioText = styled.span`\r\n    vertical-align: -6.5px;\r\n    border-radius: 12px;\r\n    outline: none;\r\n    transition: 0.2s;\r\n    padding: 4px 17px; \r\n    font-family: Rounded Mplus 1c;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    line-height: 20px;\r\n    color: #1F1F33;\r\n`\r\n\r\nexport const SizeDoughText = styled(RadioText)`\r\n    padding: 4px 20px;  \r\n`\r\n\r\nexport const SauceInner = styled.div`\r\n    width: 100%;\r\n    background: #F9F9FB;\r\n    padding: 6px 6px 12px;\r\n    border-radius: 12px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nexport const CheckboxGroup = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: 30px;\r\n`\r\n\r\nexport const CheckboxInner = styled.label`\r\n    background: #FFFFFF;\r\n    box-shadow: 0px 8px 16px rgba(75, 75, 124, 0.05);\r\n    border-radius: 12px;\r\n`\r\n\r\n \r\n\r\nexport const CheckboxTitle = styled.div` \r\n    font-family: Rounded Mplus 1c;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    font-size: 14px;\r\n    line-height: 20px;\r\n    color: #1F1F33;\r\n    border-radius: 12px;\r\n    position: relative; \r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 0 0 9px 16px;\r\n`\r\n\r\nexport const CheckboxWrapper = styled.div`\r\n    display: flex;\r\n    padding-left: 15px;\r\n`\r\n\r\nexport const CheckboxText = styled.p`\r\n    color: #1F1F33;\r\n    margin-block-start: 0;\r\n    margin-block-end: 0;\r\n    padding-right: 30px;\r\n    font-family: Rounded Mplus 1c;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 16px;\r\n    line-height: 20px;\r\n`","import React from 'react'\r\nimport { useForm } from 'react-hook-form';\r\nimport { Link } from \"react-router-dom\";\r\nimport { toppingsName } from './store/ToppingsName'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { finalTotal } from './store/PizzaStoreRedux';\r\nimport * as Style from './PizzaEditorStyle'\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\"; \r\n\r\n\r\n// https://dzs9l.sse.codesandbox.io/ мой серв: пофиксить названия сменить добавить данные \r\n\r\n\r\nconst PizzaEditorForm = () => {\r\n    const { register, handleSubmit, watch } = useForm({\r\n        defaultValues: {\r\n            size: 'small',\r\n            sauce: 'tomatoSauce',\r\n            dough: 'thin',\r\n            cheese: [],\r\n            vegetables: [],\r\n            meat: [],\r\n        }\r\n    }) \r\n    var settings = {\r\n        dots: false,\r\n        infinite: true,\r\n        slidesToShow: 3,\r\n        slidesToScroll: 1\r\n    };\r\n    const dispatch = useDispatch();\r\n    let PizzaServData = useSelector(state => state.pizzaServData[0])\r\n    const PizzaName = useSelector(state => state.toppings)\r\n    const ServAnswer = useSelector(state => state.servAnswer)\r\n    const values = watch()\r\n    const price = finalTotal(values, PizzaServData); \r\n    const onSubmit = (data) => {\r\n        finalTotal(values, PizzaServData)\r\n        dispatch({ type: \"pizza/finalTotal\", payload: price })\r\n        toppingsName({ values, PizzaServData, PizzaName, dispatch })\r\n    }\r\n    const imgsrc = (imgName, width) => {\r\n        return <img src={`https://dzs9l.sse.codesandbox.io/${imgName}.png`} alt=\"topping\" width={width} height=\"64\" />\r\n    }\r\n    const names = [values.sauce, values.size, values.dough, ...values.cheese, ...values.vegetables, ...values.meat,]\r\n    const img = [values.dough, ...values.cheese, ...values.meat, ...values.vegetables,]\r\n    let valueName = names.map((item, i) => {\r\n        return (\r\n            <p key={i} className=\"pizza-list__ing\">\r\n                {item}\r\n            </p>\r\n        )\r\n    })\r\n    let imgName = img.map((item, i) => { \r\n        let styles = {\r\n            position: \"absolute\",\r\n            zIndex: i,\r\n            left: \"50%\",\r\n            top: \"50%\",\r\n            width: i < 1 ? 265 : 215,\r\n            transform: \" translate(-50%, -50%)\",\r\n            backgroundRepeat: \"no-repeat\",\r\n            backgroundSize: \"cover\",\r\n        }\r\n        return (\r\n            <img src={`https://dzs9l.sse.codesandbox.io/${item}.png`} alt=\"topping1\" style={styles} key={i} />\r\n        )\r\n    })\r\n    if (ServAnswer.isError) {\r\n        return <>Error: {JSON.stringify(ServAnswer.error)}</>;\r\n    }\r\n\r\n    if (ServAnswer.isLoading) {\r\n        return <div className=\"logo\"></div>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className=\"header\">\r\n                    <div className=\"header__logo\"></div>\r\n                    <div className=\"header__profile\"></div>\r\n                </div>\r\n                <div style={{\r\n                    display: \"flex\",\r\n                    height: 380,\r\n                    width: 360,\r\n                    margin: \"0 auto\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"space-between\"\r\n                }}>\r\n                    <div style={{\r\n                        width: 360,\r\n                        height: 274,\r\n                        display: \"flex\",\r\n                        position: \"relative\",\r\n                    }}>\r\n                        {imgName}\r\n                    </div>\r\n                    <p className=\"pizza__name\">Best pizza</p>\r\n                    <div style={{\r\n                        width: 360,\r\n                        height: \"fit-content\",\r\n                        display: \"flex\",\r\n                        flexWrap: \"wrap\",\r\n                        marginBottom: 20,\r\n                        marginLeft: 10,\r\n                    }}>\r\n                        {valueName}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Style.MainApp onSubmit={handleSubmit(onSubmit)} >\r\n                <Style.SizeDoughInner >\r\n                    <Style.SizeDough>\r\n                        <Style.ToppingTitle>Выберите тесто:</Style.ToppingTitle>\r\n                        <Style.SizeDoughWrapper>\r\n                            <Style.RadioLabel>\r\n                                <Style.RadioBox\r\n                                    ref={register}\r\n                                    type=\"radio\"\r\n                                    value=\"thin\"\r\n                                    name=\"dough\"\r\n                                />\r\n                                <Style.SizeDoughText id=\"dough-thin__text\">\r\n                                    {PizzaServData.dough.thin.slug}\r\n                                </Style.SizeDoughText>\r\n                            </Style.RadioLabel>\r\n                            <Style.RadioLabel>\r\n                                <Style.RadioBox\r\n                                    ref={register}\r\n                                    type=\"radio\"\r\n                                    value=\"fluffy\"\r\n                                    name=\"dough\"\r\n                                />\r\n                                <Style.SizeDoughText id=\"dough-fluffy__text\">\r\n                                    {PizzaServData.dough.fluffy.slug}\r\n                                </Style.SizeDoughText>\r\n                            </Style.RadioLabel>\r\n                        </Style.SizeDoughWrapper>\r\n                    </Style.SizeDough>\r\n                    <Style.SizeDough>\r\n                        <Style.ToppingTitle>Выберите размер:</Style.ToppingTitle>\r\n                        <Style.SizeDoughWrapper>\r\n                            <Style.RadioLabel>\r\n                                <Style.RadioBox\r\n                                    ref={register}\r\n                                    type=\"radio\"\r\n                                    value=\"small\"\r\n                                    name=\"size\"\r\n                                />\r\n                                <Style.SizeDoughText id=\"size-small__text\">\r\n                                    {PizzaServData.size.small.slug}\r\n                                </Style.SizeDoughText>\r\n                            </Style.RadioLabel>\r\n                            <Style.RadioLabel>\r\n                                <Style.RadioBox\r\n                                    ref={register}\r\n                                    type=\"radio\"\r\n                                    value=\"big\"\r\n                                    name=\"size\"\r\n                                />\r\n                                <Style.SizeDoughText id=\"size-big__text\">\r\n                                    {PizzaServData.size.big.slug}\r\n                                </Style.SizeDoughText>\r\n                            </Style.RadioLabel>\r\n\r\n                        </Style.SizeDoughWrapper>\r\n                    </Style.SizeDough>\r\n                </Style.SizeDoughInner>\r\n\r\n                <fieldset className=\"sauce\">\r\n                    <Style.ToppingTitle>Выберите соус:</Style.ToppingTitle>\r\n                    <Style.SauceInner>\r\n                        <Style.RadioLabel>\r\n                            <Style.RadioBox\r\n                                ref={register}\r\n                                type=\"radio\"\r\n                                value=\"tomatoSauce\"\r\n                                name=\"sauce\"\r\n                            />\r\n                            <Style.RadioText id=\"tomato-sauce__text\">\r\n                                {PizzaServData.sauce.tomatoSauce.slug}\r\n                            </Style.RadioText>\r\n                        </Style.RadioLabel>\r\n                        <Style.RadioLabel>\r\n                            <Style.RadioBox\r\n                                ref={register}\r\n                                type=\"radio\"\r\n                                value=\"whiteSauce\"\r\n                                name=\"sauce\"\r\n                            />\r\n                            <Style.RadioText id=\"white-sauce__text\">\r\n                                {PizzaServData.sauce.whiteSauce.slug}\r\n                            </Style.RadioText>\r\n                        </Style.RadioLabel>\r\n                        <Style.RadioLabel>\r\n                            <Style.RadioBox\r\n                                ref={register}\r\n                                type=\"radio\"\r\n                                value=\"spicySauce\"\r\n                                name=\"sauce\"\r\n                            />\r\n                            <Style.RadioText id=\"spicy-sauce__text\">\r\n                                {PizzaServData.sauce.spicySauce.slug}\r\n                            </Style.RadioText>\r\n                        </Style.RadioLabel>\r\n                    </Style.SauceInner>\r\n                </fieldset>\r\n\r\n                <fieldset className=\"cheese\">\r\n                    <Style.ToppingTitle>Добавте сыр:</Style.ToppingTitle>\r\n                    <Style.CheckboxGroup>\r\n                        <Style.CheckboxInner>\r\n                            <Style.CheckboxTitle >\r\n                                {imgsrc(\"mozarella-thumb\", 64)}\r\n                                {PizzaServData.cheese.mozarella.slug}\r\n                            </Style.CheckboxTitle>\r\n                            <Style.CheckboxWrapper>\r\n                                <Style.CheckboxText>{PizzaServData.cheese.mozarella.price} ₽</Style.CheckboxText>\r\n                                <input\r\n                                    ref={register}\r\n                                    type=\"checkbox\"\r\n                                    value=\"mozarella\"\r\n                                    name=\"cheese\"\r\n                                />\r\n                            </Style.CheckboxWrapper>\r\n                        </Style.CheckboxInner>\r\n                        <Style.CheckboxInner>\r\n                            <Style.CheckboxTitle >\r\n                                {imgsrc(\"cheddar-thumb\", 64)}\r\n                                {PizzaServData.cheese.cheddar.slug}\r\n                            </Style.CheckboxTitle>\r\n                            <Style.CheckboxWrapper>\r\n                                <Style.CheckboxText>{PizzaServData.cheese.cheddar.price} ₽</Style.CheckboxText>\r\n                                <input\r\n                                    ref={register}\r\n                                    type=\"checkbox\"\r\n                                    value=\"cheddar\"\r\n                                    name=\"cheese\"\r\n                                />\r\n                            </Style.CheckboxWrapper>\r\n                        </Style.CheckboxInner>\r\n                        <Style.CheckboxInner>\r\n                            <Style.CheckboxTitle >\r\n                                {imgsrc(\"dorBlue-thumb\", 64)}\r\n                                {PizzaServData.cheese.dorBlue.slug}\r\n                            </Style.CheckboxTitle>\r\n                            <Style.CheckboxWrapper>\r\n                                <Style.CheckboxText>{PizzaServData.cheese.dorBlue.price} ₽</Style.CheckboxText>\r\n                                <input\r\n                                    ref={register}\r\n                                    type=\"checkbox\"\r\n                                    value=\"dorBlue\"\r\n                                    name=\"cheese\"\r\n                                />\r\n                            </Style.CheckboxWrapper>\r\n                        </Style.CheckboxInner>\r\n                    </Style.CheckboxGroup>\r\n                </fieldset>\r\n\r\n                <fieldset className=\"vegetables\">\r\n                    <Style.ToppingTitle>Добавте овощи:</Style.ToppingTitle>\r\n                    <div style={{ maxWidth: \"360px\", margin: \"25px auto 0\" }}>\r\n                        <Slider {...settings}>\r\n                            {/* <Style.CheckboxGroup> */}\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle >\r\n                                    {imgsrc(\"tomato-thumb\", 64)}\r\n                                    {PizzaServData.vegetables.tomato.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.vegetables.tomato.price} ₽</Style.CheckboxText>\r\n\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"tomato\"\r\n                                        name=\"vegetables\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle >\r\n                                    {imgsrc(\"mushrooms-thumb\", 64)}\r\n                                    {PizzaServData.vegetables.mushrooms.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.vegetables.mushrooms.price} ₽</Style.CheckboxText>\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"mushrooms\"\r\n                                        name=\"vegetables\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle >\r\n                                    {imgsrc(\"olives-thumb\", 64)}\r\n                                    {PizzaServData.vegetables.olives.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.vegetables.olives.price} ₽</Style.CheckboxText>\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"olives\"\r\n                                        name=\"vegetables\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle >\r\n                                    {imgsrc(\"pineapple-thumb\", 64)}\r\n                                    {PizzaServData.vegetables.pineapple.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.vegetables.pineapple.price} ₽</Style.CheckboxText>\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"pineapple\"\r\n                                        name=\"vegetables\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle >\r\n                                    {imgsrc(\"pepper-thumb\", 64)}\r\n                                    {PizzaServData.vegetables.pepper.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.vegetables.pepper.price} ₽</Style.CheckboxText>\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"pepper\"\r\n                                        name=\"vegetables\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle >\r\n                                    {imgsrc(\"broccoli-thumb\", 64)}\r\n                                    {PizzaServData.vegetables.broccoli.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.vegetables.broccoli.price} ₽</Style.CheckboxText>\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"broccoli\"\r\n                                        name=\"vegetables\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle >\r\n                                    {imgsrc(\"onion-thumb\", 64)}\r\n                                    {PizzaServData.vegetables.onion.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.vegetables.onion.price} ₽</Style.CheckboxText>\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"onion\"\r\n                                        name=\"vegetables\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            {/* </Style.CheckboxGroup> */}\r\n                        </Slider>\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset className=\"meat\">\r\n                    <Style.ToppingTitle>Добавте мясо:</Style.ToppingTitle>\r\n                    <div style={{ maxWidth: \"360px\", margin: \"25px auto 0\" }}>\r\n                        <Slider {...settings}>\r\n                            {/* <Style.CheckboxGroup> */}\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle >\r\n                                    {imgsrc(\"bacon-thumb\", 64)}\r\n                                    {PizzaServData.meat.bacon.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.meat.bacon.price} ₽</Style.CheckboxText>\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"bacon\"\r\n                                        name=\"meat\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle >\r\n                                    {imgsrc(\"pepperoni-thumb\", 64)}\r\n                                    {PizzaServData.meat.pepperoni.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.meat.pepperoni.price} ₽</Style.CheckboxText>\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"pepperoni\"\r\n                                        name=\"meat\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle  >\r\n                                    {imgsrc(\"ham-thumb\", 64)}\r\n                                    {PizzaServData.meat.ham.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.meat.ham.price} ₽</Style.CheckboxText>\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"ham\"\r\n                                        name=\"meat\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle >\r\n                                    {imgsrc(\"chicken-thumb\", 64)}\r\n                                    {PizzaServData.meat.chicken.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.meat.chicken.price} ₽</Style.CheckboxText>\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"chicken\"\r\n                                        name=\"meat\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            <Style.CheckboxInner>\r\n                                <Style.CheckboxTitle >\r\n                                    {imgsrc(\"salami-thumb\", 64)}\r\n                                    {PizzaServData.meat.salami.slug}\r\n                                </Style.CheckboxTitle>\r\n                                <Style.CheckboxWrapper>\r\n                                    <Style.CheckboxText>{PizzaServData.meat.salami.price} ₽</Style.CheckboxText>\r\n                                    <input\r\n                                        ref={register}\r\n                                        type=\"checkbox\"\r\n                                        value=\"salami\"\r\n                                        name=\"meat\"\r\n                                    />\r\n                                </Style.CheckboxWrapper>\r\n                            </Style.CheckboxInner>\r\n                            {/* </Style.CheckboxGroup> */}\r\n                        </Slider>\r\n                    </div>\r\n                </fieldset>\r\n                <Link to=\"/payment-form\" onClick={onSubmit} className=\"submit__btn-wrapper\">\r\n                    <button className=\"submit__btn-inner active\">\r\n                        <span className=\"submit__btn active\">Заказать за {price}</span>\r\n                    </button>\r\n                </Link>\r\n            </Style.MainApp>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default PizzaEditorForm ","\r\n\r\nexport const toppingsName = ({ values, PizzaServData, PizzaName, dispatch }) => { \r\n    const newTopping = []\r\n    let pizzaData = PizzaServData\r\n    const doughName = pizzaData.dough[values.dough].name\r\n    const sizeName = pizzaData.size[values.size].name;\r\n    const sauceName = pizzaData.sauce[values.sauce].name;\r\n    const cheeseName = values.cheese.map((name, i) => {\r\n        return pizzaData.cheese[name].name\r\n    })\r\n    const vegetablesName = values.vegetables.map((name, i) => {\r\n        return pizzaData.vegetables[name].name\r\n    })\r\n    const meatName = values.meat.map((name, i) => {\r\n        return pizzaData.meat[name].name\r\n    })\r\n    newTopping.push(doughName, sizeName, sauceName, ...cheeseName, ...vegetablesName, ...meatName) \r\n    PizzaName = [...newTopping]\r\n    dispatch({ type: \"pizza/pizzaName\", payload: PizzaName })\r\n}\r\n","import React from 'react'\nimport './App.css';\nimport './reset.css'\nimport { Link, Route, Switch } from \"react-router-dom\";\nimport Checkout from './Checkout/Checkout';\nimport Registration from './Login/Registration';\nimport Login from './Login/Login';\nimport OrderList from './OrderList/OrderList';\nimport PaymentForm from './PaymentForm/PaymentForm';\nimport PizzaEditorForm from './PizzaEditor/PizzaEditorForm'\nimport './PizzaEditorStyle.css'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useQuery } from \"react-query\";\nimport * as Style from './PizzaEditor/PizzaEditorStyle'\n\n\nfunction App() {\n\n  const dispatch = useDispatch();\n  const { isLoading, isError, data, error } = useQuery(\n    \"someId\", () => fetch(`http://localhost:4000/ingredients`).then((res) => res.json())\n  );\n  dispatch({ type: \"pizza/servAnswer\", isLoading: isLoading, isError: isError, error: error })\n\n  const Registered = useSelector(state => state.registered)\n  const auth = () => {\n    if (Registered) {\n      return \"/order-list\"\n    } else {\n      return \"/login\"\n    }\n  }\n \n  return (\n    <>\n      <nav>\n        <ul>\n          <li><Link to=\"/\">PizzaEditor</Link></li>\n          <li><Link to=\"/checkout\">Checkout</Link></li>\n          <li><Link to=\"/registration\">Registration</Link></li>\n          <li><Link to=\"/login\">Login</Link></li>\n          <li><Link to={auth}>OrderList</Link></li>\n          <li><Link to=\"/payment-form\">PaymentForm</Link></li>\n        </ul>\n      </nav>\n\n\n      <Switch>\n        <Route path=\"/\" exact>\n          <PizzaEditorForm />\n        </Route>\n        <Route path=\"/checkout\">\n          <Checkout />\n        </Route>\n        <Route path=\"/registration\">\n          <Registration />\n        </Route>\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n        <Route path=\"/order-list\">\n          <OrderList />\n        </Route>\n        <Route path=\"/payment-form\">\n          <PaymentForm />\n        </Route>\n      </Switch>\n\n    </>\n  )\n}\n\nexport default App \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { store } from \"./PizzaEditor/store/PizzaStoreRedux\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n\n  <BrowserRouter>\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}